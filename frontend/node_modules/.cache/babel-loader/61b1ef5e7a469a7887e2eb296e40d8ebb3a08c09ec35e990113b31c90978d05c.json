{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rasoo\\\\Downloads\\\\adwait\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// const ExpenseSplitter = () => {\n//   const [groupName, setGroupName] = useState('');\n//   const [userName, setUserName] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [amount, setAmount] = useState(0);\n//   const [paidBy, setPaidBy] = useState('');\n//   const [users, setUsers] = useState([]);\n//   const [expenses, setExpenses] = useState([]);\n\n//   const handleAddUser = () => {\n//     setUsers([...users, userName]);\n//     setUserName('');\n//   };\n\n//   const handleAddExpense = () => {\n//     setExpenses([...expenses, { description, amount, paidBy }]);\n//     setDescription('');\n//     setAmount(0);\n//     setPaidBy('');\n//   };\n\n//   const calculateBalances = () => {\n//     const balances = {};\n//     users.forEach(user => {\n//       balances[user] = 0;\n//     });\n\n//     expenses.forEach(expense => {\n//       balances[expense.paidBy] += expense.amount;\n//       const share = expense.amount / (users.length - 1);\n//       users.forEach(user => {\n//         if (user !== expense.paidBy) {\n//           balances[user] -= share;\n//         }\n//       });\n//     });\n\n//     return balances;\n//   };\n\n//   const calculateDebts = () => {\n//     const balances = calculateBalances();\n//     const debts = {};\n\n//     Object.entries(balances).forEach(([user, balance]) => {\n//       if (balance < 0) {\n//         debts[user] = {};\n//         Object.entries(balances).forEach(([otherUser, otherBalance]) => {\n//           if (otherBalance > 0) {\n//             const amountToTransfer = Math.min(-balance, otherBalance);\n//             debts[user][otherUser] = amountToTransfer;\n//             balance += amountToTransfer;\n//             balances[otherUser] -= amountToTransfer;\n//           }\n//         });\n//       }\n//     });\n\n//     return debts;\n//   };\n\n//   const handleGroupCreation = () => {\n//     // Perform any necessary actions for group creation\n//     // For now, let's just log the group name and users\n//     console.log(\"Group Name:\", groupName);\n//     console.log(\"Users:\", users);\n//   };\n\n//   const handleBalanceClick = () => {\n//     // You can display the balances in your UI as needed\n//   };\n\n//   return (\n//     <div>\n//       <h2>Expense Splitter</h2>\n//       <label>\n//         Group Name:\n//         <input type=\"text\" value={groupName} onChange={(e) => setGroupName(e.target.value)} />\n//       </label>\n//       <button onClick={handleGroupCreation}>Create Group</button>\n\n//       <h3>Add Users</h3>\n//       <ul>\n//         {users.map((user, index) => (\n//           <li key={index}>{user}</li>\n//         ))}\n//       </ul>\n//       <label>\n//         Add User:\n//         <input type=\"text\" value={userName} onChange={(e) => setUserName(e.target.value)} />\n//         <button onClick={handleAddUser}>Add</button>\n//       </label>\n\n//       <h3>Add Expense</h3>\n//       <label>\n//         Description:\n//         <input type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\n//       </label>\n//       <label>\n//         Amount:\n//         <input type=\"number\" value={amount} onChange={(e) => setAmount(parseFloat(e.target.value))} />\n//       </label>\n//       <label>\n//         Paid By:\n//         <select value={paidBy} onChange={(e) => setPaidBy(e.target.value)}>\n//           <option value=\"\">Select</option>\n//           {users.map((user, index) => (\n//             <option key={index} value={user}>{user}</option>\n//           ))}\n//         </select>\n//       </label>\n//       <button onClick={handleAddExpense}>Add Expense</button>\n\n//       <button onClick={handleBalanceClick}>Check Balances</button>\n\n//       {/* Display Expenses */}\n//       <div>\n//         <h3>Expenses</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Description</th>\n//               <th>Amount</th>\n//               <th>Paid By</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {expenses.map((expense, index) => (\n//               <tr key={index}>\n//                 <td>{expense.description}</td>\n//                 <td>{expense.amount}</td>\n//                 <td>{expense.paidBy}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Display Settlement Balances */}\n//       <div>\n//         <h3>Settlement Balances</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>User</th>\n//               <th>Balance</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {Object.entries(calculateBalances()).map(([user, balance]) => (\n//               <tr key={user}>\n//                 <td>{user}</td>\n//                 <td>{balance}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Display Debts */}\n//       <div>\n//         <h3>Debts</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>From</th>\n//               <th>To</th>\n//               <th>Amount</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {Object.entries(calculateDebts()).map(([from, tos]) =>\n//               Object.entries(tos).map(([to, amount], index) => (\n//                 <tr key={index}>\n//                   <td>{from}</td>\n//                   <td>{to}</td>\n//                   <td>{amount}</td>\n//                 </tr>\n//               ))\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ExpenseSplitter;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseSplitter = () => {\n  _s();\n  const [groupName, setGroupName] = useState('');\n  const [userName, setUserName] = useState('');\n  const [description, setDescription] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [paidBy, setPaidBy] = useState('');\n  const [users, setUsers] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [showBalances, setShowBalances] = useState(false);\n  const [showDebts, setShowDebts] = useState(false);\n  const handleAddUser = () => {\n    setUsers([...users, userName]);\n    setUserName('');\n  };\n  const handleAddExpense = () => {\n    setExpenses([...expenses, {\n      description,\n      amount,\n      paidBy\n    }]);\n    setDescription('');\n    setAmount(0);\n    setPaidBy('');\n  };\n  const calculateBalances = () => {\n    const balances = {};\n    users.forEach(user => {\n      balances[user] = 0;\n    });\n    expenses.forEach(expense => {\n      balances[expense.paidBy] += expense.amount;\n      const share = expense.amount / (users.length - 1);\n      users.forEach(user => {\n        if (user !== expense.paidBy) {\n          balances[user] -= share;\n        }\n      });\n    });\n    return balances;\n  };\n  const calculateDebts = () => {\n    const balances = calculateBalances();\n    const debts = {};\n    Object.entries(balances).forEach(_ref => {\n      let [user, balance] = _ref;\n      if (balance < 0) {\n        debts[user] = {};\n        Object.entries(balances).forEach(_ref2 => {\n          let [otherUser, otherBalance] = _ref2;\n          if (otherBalance > 0) {\n            const amountToTransfer = Math.min(-balance, otherBalance);\n            debts[user][otherUser] = amountToTransfer;\n            balance += amountToTransfer;\n            balances[otherUser] -= amountToTransfer;\n          }\n        });\n      }\n    });\n    return debts;\n  };\n  const handleShowBalances = () => {\n    setShowBalances(true);\n    setShowDebts(false);\n  };\n  const handleShowDebts = () => {\n    setShowDebts(true);\n    setShowBalances(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Expense Splitter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Group Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: groupName,\n        onChange: e => setGroupName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowBalances,\n      children: \"Show Settlement Balances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowDebts,\n      children: \"Show Debts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), showBalances && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Settlement Balances\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), showDebts && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Debts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseSplitter, \"1hPIr7uJidu5CgkmynGjDoCOZd4=\");\n_c = ExpenseSplitter;\nexport default ExpenseSplitter;\nvar _c;\n$RefreshReg$(_c, \"ExpenseSplitter\");","map":{"version":3,"names":["React","useState","ExpenseSplitter","groupName","setGroupName","userName","setUserName","description","setDescription","amount","setAmount","paidBy","setPaidBy","users","setUsers","expenses","setExpenses","showBalances","setShowBalances","showDebts","setShowDebts","handleAddUser","handleAddExpense","calculateBalances","balances","forEach","user","expense","share","length","calculateDebts","debts","Object","entries","balance","otherUser","otherBalance","amountToTransfer","Math","min","handleShowBalances","handleShowDebts","e","target","value"],"sources":["C:/Users/rasoo/Downloads/adwait/expense-tracker_fullstack/frontend/src/Components/Home.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// const ExpenseSplitter = () => {\r\n//   const [groupName, setGroupName] = useState('');\r\n//   const [userName, setUserName] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n//   const [amount, setAmount] = useState(0);\r\n//   const [paidBy, setPaidBy] = useState('');\r\n//   const [users, setUsers] = useState([]);\r\n//   const [expenses, setExpenses] = useState([]);\r\n\r\n//   const handleAddUser = () => {\r\n//     setUsers([...users, userName]);\r\n//     setUserName('');\r\n//   };\r\n\r\n//   const handleAddExpense = () => {\r\n//     setExpenses([...expenses, { description, amount, paidBy }]);\r\n//     setDescription('');\r\n//     setAmount(0);\r\n//     setPaidBy('');\r\n//   };\r\n\r\n//   const calculateBalances = () => {\r\n//     const balances = {};\r\n//     users.forEach(user => {\r\n//       balances[user] = 0;\r\n//     });\r\n\r\n//     expenses.forEach(expense => {\r\n//       balances[expense.paidBy] += expense.amount;\r\n//       const share = expense.amount / (users.length - 1);\r\n//       users.forEach(user => {\r\n//         if (user !== expense.paidBy) {\r\n//           balances[user] -= share;\r\n//         }\r\n//       });\r\n//     });\r\n\r\n//     return balances;\r\n//   };\r\n\r\n//   const calculateDebts = () => {\r\n//     const balances = calculateBalances();\r\n//     const debts = {};\r\n\r\n//     Object.entries(balances).forEach(([user, balance]) => {\r\n//       if (balance < 0) {\r\n//         debts[user] = {};\r\n//         Object.entries(balances).forEach(([otherUser, otherBalance]) => {\r\n//           if (otherBalance > 0) {\r\n//             const amountToTransfer = Math.min(-balance, otherBalance);\r\n//             debts[user][otherUser] = amountToTransfer;\r\n//             balance += amountToTransfer;\r\n//             balances[otherUser] -= amountToTransfer;\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     return debts;\r\n//   };\r\n\r\n//   const handleGroupCreation = () => {\r\n//     // Perform any necessary actions for group creation\r\n//     // For now, let's just log the group name and users\r\n//     console.log(\"Group Name:\", groupName);\r\n//     console.log(\"Users:\", users);\r\n//   };\r\n\r\n//   const handleBalanceClick = () => {\r\n//     // You can display the balances in your UI as needed\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Expense Splitter</h2>\r\n//       <label>\r\n//         Group Name:\r\n//         <input type=\"text\" value={groupName} onChange={(e) => setGroupName(e.target.value)} />\r\n//       </label>\r\n//       <button onClick={handleGroupCreation}>Create Group</button>\r\n\r\n//       <h3>Add Users</h3>\r\n//       <ul>\r\n//         {users.map((user, index) => (\r\n//           <li key={index}>{user}</li>\r\n//         ))}\r\n//       </ul>\r\n//       <label>\r\n//         Add User:\r\n//         <input type=\"text\" value={userName} onChange={(e) => setUserName(e.target.value)} />\r\n//         <button onClick={handleAddUser}>Add</button>\r\n//       </label>\r\n\r\n//       <h3>Add Expense</h3>\r\n//       <label>\r\n//         Description:\r\n//         <input type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n//       </label>\r\n//       <label>\r\n//         Amount:\r\n//         <input type=\"number\" value={amount} onChange={(e) => setAmount(parseFloat(e.target.value))} />\r\n//       </label>\r\n//       <label>\r\n//         Paid By:\r\n//         <select value={paidBy} onChange={(e) => setPaidBy(e.target.value)}>\r\n//           <option value=\"\">Select</option>\r\n//           {users.map((user, index) => (\r\n//             <option key={index} value={user}>{user}</option>\r\n//           ))}\r\n//         </select>\r\n//       </label>\r\n//       <button onClick={handleAddExpense}>Add Expense</button>\r\n\r\n//       <button onClick={handleBalanceClick}>Check Balances</button>\r\n\r\n//       {/* Display Expenses */}\r\n//       <div>\r\n//         <h3>Expenses</h3>\r\n//         <table>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Description</th>\r\n//               <th>Amount</th>\r\n//               <th>Paid By</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {expenses.map((expense, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{expense.description}</td>\r\n//                 <td>{expense.amount}</td>\r\n//                 <td>{expense.paidBy}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n\r\n//       {/* Display Settlement Balances */}\r\n//       <div>\r\n//         <h3>Settlement Balances</h3>\r\n//         <table>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>User</th>\r\n//               <th>Balance</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {Object.entries(calculateBalances()).map(([user, balance]) => (\r\n//               <tr key={user}>\r\n//                 <td>{user}</td>\r\n//                 <td>{balance}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n\r\n//       {/* Display Debts */}\r\n//       <div>\r\n//         <h3>Debts</h3>\r\n//         <table>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>From</th>\r\n//               <th>To</th>\r\n//               <th>Amount</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {Object.entries(calculateDebts()).map(([from, tos]) =>\r\n//               Object.entries(tos).map(([to, amount], index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{from}</td>\r\n//                   <td>{to}</td>\r\n//                   <td>{amount}</td>\r\n//                 </tr>\r\n//               ))\r\n//             )}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExpenseSplitter;\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst ExpenseSplitter = () => {\r\n  const [groupName, setGroupName] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [amount, setAmount] = useState(0);\r\n  const [paidBy, setPaidBy] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [showBalances, setShowBalances] = useState(false);\r\n  const [showDebts, setShowDebts] = useState(false);\r\n\r\n  const handleAddUser = () => {\r\n    setUsers([...users, userName]);\r\n    setUserName('');\r\n  };\r\n\r\n  const handleAddExpense = () => {\r\n    setExpenses([...expenses, { description, amount, paidBy }]);\r\n    setDescription('');\r\n    setAmount(0);\r\n    setPaidBy('');\r\n  };\r\n\r\n  const calculateBalances = () => {\r\n    const balances = {};\r\n    users.forEach(user => {\r\n      balances[user] = 0;\r\n    });\r\n\r\n    expenses.forEach(expense => {\r\n      balances[expense.paidBy] += expense.amount;\r\n      const share = expense.amount / (users.length - 1);\r\n      users.forEach(user => {\r\n        if (user !== expense.paidBy) {\r\n          balances[user] -= share;\r\n        }\r\n      });\r\n    });\r\n\r\n    return balances;\r\n  };\r\n\r\n  const calculateDebts = () => {\r\n    const balances = calculateBalances();\r\n    const debts = {};\r\n\r\n    Object.entries(balances).forEach(([user, balance]) => {\r\n      if (balance < 0) {\r\n        debts[user] = {};\r\n        Object.entries(balances).forEach(([otherUser, otherBalance]) => {\r\n          if (otherBalance > 0) {\r\n            const amountToTransfer = Math.min(-balance, otherBalance);\r\n            debts[user][otherUser] = amountToTransfer;\r\n            balance += amountToTransfer;\r\n            balances[otherUser] -= amountToTransfer;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return debts;\r\n  };\r\n\r\n  const handleShowBalances = () => {\r\n    setShowBalances(true);\r\n    setShowDebts(false);\r\n  };\r\n\r\n  const handleShowDebts = () => {\r\n    setShowDebts(true);\r\n    setShowBalances(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Expense Splitter</h2>\r\n      <label>\r\n        Group Name:\r\n        <input type=\"text\" value={groupName} onChange={(e) => setGroupName(e.target.value)} />\r\n      </label>\r\n\r\n      {/* Add Users Section */}\r\n      {/* Add Expense Section */}\r\n      {/* Display Expenses */}\r\n\r\n      <button onClick={handleShowBalances}>Show Settlement Balances</button>\r\n      <button onClick={handleShowDebts}>Show Debts</button>\r\n\r\n      {/* Display Settlement Balances */}\r\n      {showBalances && (\r\n        <div>\r\n          <h3>Settlement Balances</h3>\r\n          <table>\r\n            {/* Display balances table */}\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {/* Display Debts */}\r\n      {showDebts && (\r\n        <div>\r\n          <h3>Debts</h3>\r\n          <table>\r\n            {/* Display debts table */}\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseSplitter;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}