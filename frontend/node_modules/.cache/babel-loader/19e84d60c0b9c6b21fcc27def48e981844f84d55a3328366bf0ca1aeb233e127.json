{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rasoo\\\\Downloads\\\\adwait\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\Speech\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport useClipboard from \"react-use-clipboard\";\nimport \"./speechToText.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpeechToText() {\n  _s();\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [isCopied, setCopied] = useClipboard(transcript);\n  const [isListening, setIsListening] = useState(false);\n\n  // Function to start speech recognition\n  const startListening = () => {\n    setIsListening(true);\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  async function transcribe(transcript) {\n    try {\n      const prompt = transcript;\n      custom_prompt = prompt + \" , with the above given query extract expense title amount and title Note: You will only give the extracted words as answer in format of json like this {retrieved title from query,retrieved amount from query ,retrieved category from query} no explanations and other words would be given in response for an instance if query is 'Add an expense of 50000 in category clubbing titled as Others' then answer would be only {Others, 50000, clubbing} and if in case query doesn't contain this followig listed words like 'add an expense','category','titled' and you think amount is not given respond with you forgot to tell me about the title amount or category please speak again \";\n      // console.log(custom_prompt);\n\n      const result = await model.generateContent(custom_prompt);\n      const response = await result.response;\n      const data = response.text();\n      console.log(data);\n      // res.send(data);\n    } catch (error) {\n      console.error('Error generating content:', error);\n    }\n  }\n\n  // Function to stop speech recognition\n  const stopListening = () => {\n    setIsListening(false);\n    SpeechRecognition.stopListening();\n    console.log(\"after stopping: \" + transcript);\n    transcribe(transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"SpeakToType\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transform spoken words into text effortlessly with SpeakToType. Say it, and we'll write it for you.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onMouseDown: startListening,\n        onMouseUp: stopListening,\n        children: \"Hold to Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: resetTranscript,\n        children: \"Clear Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: setCopied,\n        children: isCopied ? \"Copied! üëç\" : \"Copy?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechToText, \"bbOjH11IjUixiI3BqDUHF0aHExo=\", false, function () {\n  return [useSpeechRecognition, useClipboard];\n});\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","SpeechRecognition","useSpeechRecognition","useClipboard","SpeechToText","transcript","resetTranscript","isCopied","setCopied","isListening","setIsListening","startListening","continuous","transcribe","prompt","custom_prompt","result","model","generateContent","response","data","text","console","log","error","stopListening"],"sources":["C:/Users/rasoo/Downloads/adwait/expense-tracker_fullstack/frontend/src/Components/Speech/SpeechToText.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport \"./speechToText.css\";\r\n\r\nfunction SpeechToText() {\r\n  const { transcript, resetTranscript } = useSpeechRecognition();\r\n  const [isCopied, setCopied] = useClipboard(transcript);\r\n  const [isListening, setIsListening] = useState(false);\r\n\r\n  // Function to start speech recognition\r\n  const startListening = () => {\r\n    setIsListening(true);\r\n    SpeechRecognition.startListening({ continuous: true });\r\n  };\r\n\r\n  async function transcribe(transcript){\r\n\r\n    try {\r\n    \r\n      const prompt = transcript;\r\n      custom_prompt = prompt + \" , with the above given query extract expense title amount and title Note: You will only give the extracted words as answer in format of json like this {retrieved title from query,retrieved amount from query ,retrieved category from query} no explanations and other words would be given in response for an instance if query is 'Add an expense of 50000 in category clubbing titled as Others' then answer would be only {Others, 50000, clubbing} and if in case query doesn't contain this followig listed words like 'add an expense','category','titled' and you think amount is not given respond with you forgot to tell me about the title amount or category please speak again \";\r\n      // console.log(custom_prompt);\r\n\r\n      const result = await model.generateContent(custom_prompt);\r\n      const response = await result.response;\r\n      const data = response.text();\r\n      console.log(data);\r\n      // res.send(data);\r\n    } catch (error) {\r\n      console.error('Error generating content:', error);\r\n    }\r\n\r\n  }\r\n\r\n  // Function to stop speech recognition\r\n  const stopListening = () => {\r\n    setIsListening(false);\r\n    SpeechRecognition.stopListening();\r\n    console.log(\"after stopping: \"+transcript);\r\n    transcribe(transcript);\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"heading\">SpeakToType</h1>\r\n      <h3>\r\n        Transform spoken words into text effortlessly with SpeakToType. Say it,\r\n        and we'll write it for you.\r\n      </h3>\r\n      <div className=\"textContainer\">\r\n        <p>{transcript}</p>\r\n      </div>\r\n      <div className=\"btnContainer\">\r\n        {/* Start speech recognition on mouse down */}\r\n        <button\r\n          className=\"btn\"\r\n          onMouseDown={startListening}\r\n          onMouseUp={stopListening}\r\n        >\r\n          Hold to Speak\r\n        </button>\r\n        <button className=\"btn\" onClick={resetTranscript}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn\" onClick={setCopied}>\r\n          {isCopied ? \"Copied! üëç\" : \"Copy?\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeechToText;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,iBAAiB,IACtBC,oBAAoB,QACf,0BAA0B;AACjC,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAO,oBAAoB;AAAC;AAE5B,SAASC,YAAY,GAAG;EAAA;EACtB,MAAM;IAAEC,UAAU;IAAEC;EAAgB,CAAC,GAAGJ,oBAAoB,EAAE;EAC9D,MAAM,CAACK,QAAQ,EAAEC,SAAS,CAAC,GAAGL,YAAY,CAACE,UAAU,CAAC;EACtD,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMW,cAAc,GAAG,MAAM;IAC3BD,cAAc,CAAC,IAAI,CAAC;IACpBT,iBAAiB,CAACU,cAAc,CAAC;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;EACxD,CAAC;EAED,eAAeC,UAAU,CAACR,UAAU,EAAC;IAEnC,IAAI;MAEF,MAAMS,MAAM,GAAGT,UAAU;MACzBU,aAAa,GAAGD,MAAM,GAAG,kqBAAkqB;MAC3rB;;MAEA,MAAME,MAAM,GAAG,MAAMC,KAAK,CAACC,eAAe,CAACH,aAAa,CAAC;MACzD,MAAMI,QAAQ,GAAG,MAAMH,MAAM,CAACG,QAAQ;MACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAI,EAAE;MAC5BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EAEF;;EAEA;EACA,MAAMC,aAAa,GAAG,MAAM;IAC1Bf,cAAc,CAAC,KAAK,CAAC;IACrBT,iBAAiB,CAACwB,aAAa,EAAE;IACjCH,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAClB,UAAU,CAAC;IAC1CQ,UAAU,CAACR,UAAU,CAAC;EAExB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAI,SAAS,EAAC,SAAS;MAAA,UAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAK,eACxC;MAAA,UAAI;IAGJ;MAAA;MAAA;MAAA;IAAA,QAAK,eACL;MAAK,SAAS,EAAC,eAAe;MAAA,uBAC5B;QAAA,UAAIA;MAAU;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QACf,eACN;MAAK,SAAS,EAAC,cAAc;MAAA,wBAE3B;QACE,SAAS,EAAC,KAAK;QACf,WAAW,EAAEM,cAAe;QAC5B,SAAS,EAAEc,aAAc;QAAA,UAC1B;MAED;QAAA;QAAA;QAAA;MAAA,QAAS,eACT;QAAQ,SAAS,EAAC,KAAK;QAAC,OAAO,EAAEnB,eAAgB;QAAA,UAAC;MAElD;QAAA;QAAA;QAAA;MAAA,QAAS,eACT;QAAQ,SAAS,EAAC,KAAK;QAAC,OAAO,EAAEE,SAAU;QAAA,UACxCD,QAAQ,GAAG,YAAY,GAAG;MAAO;QAAA;QAAA;QAAA;MAAA,QAC3B;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GAnEQH,YAAY;EAAA,QACqBF,oBAAoB,EAC9BC,YAAY;AAAA;AAAA,KAFnCC,YAAY;AAqErB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}